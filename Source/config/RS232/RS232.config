// CAPSL Configuration File
//  Trust-Hub RS232 Trojans: T300, T400, T500, T600, T700, T900, T901

RS232.def{
  xmitH            : input,
  uart_REC_dataH   : input,
  sys_clk          : input,
  sys_rst_l        : input,
  xmit_dataH       : input-vector(8),

  xmit_doneH       : output,
  uart_XMIT_dataH  : output,
  rec_readyH       : output,
  rec_dataH        : output-vector(8),

  transitions{
    s0:xmitH>s1,       // Start transmitting if xmitH
    s1:xmitH>s1,       //    Loop transitions handle IP signals being asserted for 16 clock cycles
    s1:trans0>s2,       // Start transmitting with uart_XMIT_dataH low
    s2:trans0>s2,
    s2:trans1>s3,       // Transmitting bit 0 of xmit_dataH
    s3:trans1>s3,
    s3:trans2>s4,       // Transmitting bit 1
    s4:trans2>s4,
    s4:trans3>s5,       // Transmitting bit 2
    s5:trans3>s5,
    s5:trans4>s6,       // Transmitting bit 3
    s6:trans4>s6,
    s6:trans5>s7,       // Transmitting bit 4
    s7:trans5>s7,
    s7:trans6>s8,       // Transmitting bit 5
    s8:trans6>s8,
    s8:trans7>s9,       // Transmitting bit 6
    s9:trans7>s9,
    s9:trans8>s10,      // Transmitting bit 7
    s10:trans8>s10,
    s10:trans9>s11,     // Finish transmitting with  uart_XMIT_dataH low
    s11:trans9>s11,
    s11:xmit_doneH>s0, // Return to initial state
    s0:xmit_doneH>s0,   // Ensures we stay in initial state while xmit_doneH is asserted


    s0:trans10>s12,           // Start receiving if rec line goes low
    s12:trans10>s12,           //    Loop transitions handle IP signals being asserted for 16 clock cycles
    s12:trans11>s13,           // Accept bit 0
    s13:trans11>s13,
    s13:trans12>s14,           // Accept bit 1
    s14:trans12>s14,
    s14:trans13>s15,           // Accept bit 2
    s15:trans13>s15,
    s15:trans14>s16,           // Accept bit 3
    s16:trans14>s16,
    s16:trans15>s17,           // Accept bit 4
    s17:trans15>s17,
    s17:trans16>s18,           // Accept bit 5
    s18:trans16>s18,
    s18:trans17>s19,           // Accept bit 6
    s19:trans17>s19,
    s19:trans18>s20,           // Accept bit 7
    s20:trans18>s20,
    s20:!uart_REC_dataH>s21,   // Accept stop bit
    s21:!uart_REC_dataH>s21,
    s21:rec_readyH:s0         // Return to initial state
  }
}


logic.def{

  // UART transmission should be identical to current bit
  //  Assert on condition (VHDL should be 'downto' vector option)
  logic0 : uart_XMIT_dataH == xmit_dataH(0),
  logic1 : uart_XMIT_dataH == xmit_dataH(1),
  logic2 : uart_XMIT_dataH == xmit_dataH(2),
  logic3 : uart_XMIT_dataH == xmit_dataH(3),
  logic4 : uart_XMIT_dataH == xmit_dataH(4),
  logic5 : uart_XMIT_dataH == xmit_dataH(5),
  logic6 : uart_XMIT_dataH == xmit_dataH(6),
  logic7 : uart_XMIT_dataH == xmit_dataH(7),

  // Flags used in the component IA specification
  trans0 : !xmit_doneH and !uart_XMIT_dataH,
  trans1 : !xmit_doneH and logic0,
  trans2 : !xmit_doneH and logic1,
  trans3 : !xmit_doneH and logic2,
  trans4 : !xmit_doneH and logic3,
  trans5 : !xmit_doneH and logic4,
  trans6 : !xmit_doneH and logic5,
  trans7 : !xmit_doneH and logic6,
  trans8 : !xmit_doneH and logic7,
  trans9 : !xmit_doneH and xmitH,

  trans10 : !uart_REC_dataH and !rec_readyH,
  trans11 : uart_REC_dataH == rec_dataH(0),
  trans12 : uart_REC_dataH == rec_dataH(1),
  trans13 : uart_REC_dataH == rec_dataH(2),
  trans14 : uart_REC_dataH == rec_dataH(3),
  trans15 : uart_REC_dataH == rec_dataH(4),
  trans16 : uart_REC_dataH == rec_dataH(5),
  trans17 : uart_REC_dataH == rec_dataH(6),
  trans18 : uart_REC_dataH == rec_dataH(7),


  // Used for counting transmitted bytes
  logic8 : xmitH == '1',

  // T300, T500 Trigger counter
  counter1 : counter {
    on: logic8,
    start: x"00000000",
    end: x"FFFFFFFF"
  }


  // Used for tracking T400 trigger conditions
  logic9 : rec_dataH == x"4C",
  logic10 : xmit_dataH == x"4C",


  // Used for tracking T600, T900 trigger sequence
  logic11 : xmit_dataH == x"AA",
  logic12 : xmit_dataH == x"55",
  logic13 : xmit_dataH == x"22",
  logic14 : xmit_dataH == x"FF",


  // Used for tracking T700 trigger sequence
  logic15 : xmit_dataH == x"AA",
  logic16 : xmit_dataH == x"55",
  logic17 : xmit_dataH == x"00",
  logic18 : xmit_dataH == x"FF",


  // Used for tracking T901 trigger sequence
  logic19 : xmit_dataH == x"AA",
  logic20 : xmit_dataH == x"00",
  logic21 : xmit_dataH == x"55",
  logic22 : xmit_dataH == x"FF",


  // Illegal conditions
  prohibited{
    {counter1},                               // Restrict the T300, T500 trigger (Using the counter)
    {logic9 : logic10},                       // Restrict the T400 trigger (Using SERE fusion operator)
    {logic11 ; logic12 ; logic13 ; logic14},  // Restrict the T600, T900 trigger (Using SERE concatenation operator)
    {logic15 ; logic16 ; logic17 ; logic18},  // Restrict the T700 trigger
    {logic19 ; logic20 ; logic21 ; logic22}   // Restrict the T901 trigger
  }
}
